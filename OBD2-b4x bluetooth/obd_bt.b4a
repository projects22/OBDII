Build1=Default,anywheresoftware.b4a.samples.bluetooth
File1=main.bal
File2=obd.bal
FileGroup1=Default Group
FileGroup2=Default Group
Group=Default Group
Library1=core
Library2=randomaccessfile
Library3=serial
Library4=runtimepermissions
Library5=byteconverter
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: https://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="5" android:targetSdkVersion="26"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~CreateResourceFromFile(Macro, Themes.LightTheme)~\n~'End of default text.~\n~
Module1=BluetoothManager
NumberOfFiles=2
NumberOfLibraries=5
NumberOfModules=1
Version=10.2
@EndOfDesignText@
#Region Module Attributes
	#FullScreen: False
	#IncludeTitle: True
	#ApplicationLabel: obd2_bt
	#VersionCode: 1
	#VersionName: 
	#SupportedOrientations: portrait
	#CanInstallToExternalStorage: False
	#BridgeLogger: true
#End Region

Sub Process_Globals
	Private rp As RuntimePermissions
	Public Manager As BluetoothManager
	Private bc As ByteConverter
End Sub

Sub Globals
	Private btnSearchForDevices As Button
	Private btnAllowConnection As Button
	Private reply As String
	
	Private a, b As Int
	Private conn=False As Boolean
	Private cn As String
	Private btn04 As Button
	Private btn05 As Button
	Private text05 As EditText
	Private text04 As EditText
	Private reply As String
	Private btn06 As Button
	Private text06 As EditText
	Private text07 As EditText
	Private btn07 As Button
	Private btn0b As Button
	Private text0b As EditText
	Private text0c As EditText
	Private btn0c As Button
	Private btn0d As Button
	Private text0d As EditText
	Private text0e As EditText
	Private btn0e As Button
	Private text0f As EditText
	Private btn0f As Button
	Private btn11 As Button
	Private text11 As EditText
	Private text14 As EditText
	Private btn14 As Button
	Private Label1 As Label
	Private btn_t As Button
	Private pidNo As EditText
	Private btnDTC As Button
	Private textVID As EditText
	Private btnVID As Button
	Private ScrollView1 As ScrollView
	Private msgB As EditText
	Private text1 As EditText
	Private res As Byte
End Sub


Sub Activity_Create(FirstTime As Boolean)
	Activity.LoadLayout("main")
	ScrollView1.Panel.Height = 1100dip
	ScrollView1.Height=100%y
	ScrollView1.Width=100%x
	ScrollView1.Panel.LoadLayout("obd")
	Manager.Initialize
	
End Sub

Sub Activity_Resume
	UpdateState
End Sub

Public Sub UpdateState
	btnSearchForDevices.Enabled = Manager.BluetoothState
	btnAllowConnection.Enabled = Manager.BluetoothState
	conn = Manager.ConnectionState
	Label1.Visible = Manager.ConnectionState
End Sub

Public Sub NewMessage (msg As String)
	reply = reply & msg
	If reply.Contains(">") Then
		msgB.Text = reply
		'text1.Text = reply
		convert
	End If

End Sub

Sub convert
	Dim aa(), bb() As Byte
	Dim cc As Int
	Dim vin, ss As String
	Dim i,c() As Byte
	
	If reply.Length > 16 Then
		If res<50 Then

		Try
			aa=bc.HexToBytes(reply.SubString2(13,15))	
			bb=bc.HexToBytes(reply.SubString2(16,18))	
			a=Bit.And(0xFF,aa(0))		'convert byte to unsigned byte
			b=Bit.And(0xFF,bb(0))
			cn = reply.SubString2(10, 12)	
		Catch
			msgB.Text = msgB.Text & "NO DATA"
		End Try
	
		Select res
			Case 20
				a = a/200
				b = b*100/128 - 100
				text14.Text = a & " V,  " & b & " %  - " & cn
			Case 17
				a = a*100/255
				text11.Text = a & " %  - " & cn
			Case 15
				a = a-40
				text0f.Text = a & " °C  - " & cn
			Case 14
				a = (a/2)-64
				text0e.Text = a & " °  - " & cn
			Case 13
				text0d.Text = a & " km/h  - " & cn
			Case 12
				cc = (a * 256 + b) / 4
				text0c.Text = cc & " RPM  - " & cn
			Case 11
				text0b.Text = a & " kPa  - " & cn
			Case 7
				a=a*100/128 - 100
				text07.Text = a & " %  - " & cn
			Case 6
				a=a*100/128 - 100 	
				text06.Text = a & " %  - " & cn
			Case 5
				a = a-40
				text05.Text = a & " °C  - " & cn
			Case 4
				a = a*100/255
				text04.Text = a & " %  - " & cn

			End Select
		Else
			For i=0 To 2
				ss=reply.SubString2(21+i*3,23+i*3)
				c=bc.HexToBytes(ss)
				vin=vin & BytesToString(c,0,c.Length,"UTF8")
			Next
			For i=0 To 6
				ss=reply.SubString2(38+i*3,40+i*3)
				c=bc.HexToBytes(ss)
				vin=vin & BytesToString(c,0,c.Length,"UTF8")
			Next
			For i=0 To 6
				ss=reply.SubString2(64+i*3,66+i*3)
				c=bc.HexToBytes(ss)
				vin=vin & BytesToString(c,0,c.Length,"UTF8")
			Next
			textVID.Text = vin
		End If	
	End If
	res=0
	reply=""
End Sub

Sub btn_t_Click
	If conn Then
		Manager.SendMessage(pidNo.text & Chr(13) & Chr(10))	'pidNo.text, "atz"
	End If
End Sub

Sub btnDTC_Click
	If conn Then
		Manager.SendMessage("0301" & Chr(13) & Chr(10))
	End If
End Sub

Sub btnVID_Click
	If conn Then
		Manager.SendMessage("0902" & Chr(13) & Chr(10))
		res=50
	End If
End Sub

Sub btn04_Click
	If conn Then
		Manager.SendMessage("0104" & Chr(13) & Chr(10))
		res=4
	End If
End Sub

Sub btn05_Click
	If conn Then
		Manager.SendMessage("0105" & Chr(13) & Chr(10))
		res=5
	End If
End Sub

Sub btn06_Click
	If conn Then
		Manager.SendMessage("0106" & Chr(13) & Chr(10))
		res=6
	End If
End Sub

Sub btn07_Click
	If conn Then
		Manager.SendMessage("0107" & Chr(13) & Chr(10))
		res=7
	End If
End Sub

Sub btn0b_Click
	If conn Then
		Manager.SendMessage("010B" & Chr(13) & Chr(10))
		res=11
	End If
End Sub

Sub btn0c_Click
	If conn Then
		Manager.SendMessage("010C" & Chr(13) & Chr(10))
		res=12
	End If
End Sub

Sub btn0d_Click
	If conn Then
		Manager.SendMessage("010D" & Chr(13) & Chr(10))
		res=13
	End If
End Sub

Sub btn0e_Click
	If conn Then
		Manager.SendMessage("010E" & Chr(13) & Chr(10))
		res=14
	End If
End Sub

Sub btn0f_Click
	If conn Then
		Manager.SendMessage("010F" & Chr(13) & Chr(10))
		res=15
	End If
End Sub

Sub btn11_Click
	If conn Then
		Manager.SendMessage("0111" & Chr(13) & Chr(10))
		res=17
	End If
End Sub

Sub btn14_Click
	If conn Then
		Manager.SendMessage("0114" & Chr(13) & Chr(10))
		res=20
	End If
End Sub

Sub btnSearchForDevices_Click
	rp.CheckAndRequest(rp.PERMISSION_ACCESS_COARSE_LOCATION)
	Wait For Activity_PermissionResult (Permission As String, Result As Boolean)
	If Result = False Then
		ToastMessageShow("No permission...", False)
		Return
	End If
	Dim success As Boolean = Manager.SearchForDevices
	If success = False Then
		ToastMessageShow("Error starting discovery process.", True)
	Else
		ProgressDialogShow2("Searching for devices...", False)
	End If
End Sub

Public Sub DiscoverFinished
	ProgressDialogHide
	If Manager.foundDevices.Size = 0 Then
		ToastMessageShow("No device found.", True)
	Else
		Dim l As List
		l.Initialize
		For Each nm As NameAndMac In Manager.foundDevices
			l.Add(nm.Name)
		Next
		InputListAsync(l, "Choose device to connect", -1, True)
		Wait For InputList_Result (Index As Int)
		If Index <> DialogResponse.CANCEL Then
			Dim device As NameAndMac = Manager.foundDevices.Get(Index)
			Manager.ConnectTo(device)
			ProgressDialogShow2($"Trying to connect to: ${device.Name} (${device.Mac})"$, False)
		End If
	End If
End Sub

Public Sub AfterConnect (Success As Boolean)
	ProgressDialogHide
End Sub


Sub btnAllowConnection_Click
	Manager.ListenForConnections
End Sub

Sub Activity_Pause (UserClosed As Boolean)
	
End Sub

