Build1=Default,b4a.obd_usb
File1=main.bal
File2=obd.bal
FileGroup1=Default Group
FileGroup2=Default Group
Group=Default Group
Library1=core
Library2=felusbserial
Library3=usb
Library4=b4xcollections
Library5=byteconverter
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: https://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="5" android:targetSdkVersion="28"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~CreateResourceFromFile(Macro, Themes.DarkTheme)~\n~'End of default text.~\n~
NumberOfFiles=2
NumberOfLibraries=5
NumberOfModules=0
Version=10.2
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: OBD USB 10
	#VersionCode: 1
	#VersionName: 
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: portrait
	#CanInstallToExternalStorage: False
#End Region

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: True
#End Region

Sub Process_Globals
	Private usbserial As felUsbSerial
	Private manager As UsbManager
	Private bc As ByteConverter

End Sub

Sub Globals
	Private btnConnect As Button
	Private a, b , conn=0 As Int
	Private res As Int 
	Private cn As String
	Private btn04 As Button
	Private btn05 As Button
	Private text05 As EditText
	Private text04 As EditText
	Private reply As String
	Private btn06 As Button
	Private text06 As EditText
	Private text07 As EditText
	Private btn07 As Button
	Private btn0b As Button
	Private text0b As EditText
	Private text0c As EditText
	Private btn0c As Button
	Private btn0d As Button
	Private text0d As EditText
	Private text0e As EditText
	Private btn0e As Button
	Private text0f As EditText
	Private btn0f As Button
	Private btn11 As Button
	Private text11 As EditText
	Private text14 As EditText
	Private btn14 As Button
	Private Label1 As Label
	Private btn_t As Button
	Private pidNo As EditText
	Private msg As EditText
	Private btnDTC As Button
	Private textVID As EditText
	Private btnVID As Button
	Private ScrollView1 As ScrollView
	
End Sub

Sub Activity_Create(FirstTime As Boolean)
	Activity.LoadLayout("main")
	ScrollView1.Panel.Height = 1100dip
	ScrollView1.Height=100%y
	ScrollView1.Width=100%x
	ScrollView1.Panel.LoadLayout("obd")
	
   If FirstTime Then
     manager.Initialize
   End If
End Sub

Sub btnConnect_Click
   If manager.GetDevices.Length = 0 Then
     'Log("No connected usb devices.")
		Label1.Text = "No USB devices"
   Else
     Dim device As UsbDevice = manager.GetDevices(0) 'assuming that there is exactly one device
     If manager.HasPermission(device) = False Then
			Label1.Text = "Click Connect"
       ToastMessageShow("Please allow connection and click again.", True)
       manager.RequestPermission(device)
     Else
		'usbserial.Initialize2("serial", device, -1,"CH34xSerialDevice")
		'usbserial.Initialize2("serial", device, -1,"CP2102SerialDevice")
	   usbserial.Initialize("serial", device, -1)
		usbserial.BaudRate = 38400	'38400
       usbserial.DataBits = usbserial.DATA_BITS_8
			usbserial.StartReading
			Label1.Text = "Connected"
			conn=1
			btn04.Enabled=True
		End If
	End If
End Sub

Private Sub serial_DataAvailable (Buffer() As Byte)
	reply = reply & BytesToString(Buffer, 0, Buffer.Length, "ISO-8859-1")
	If reply.Contains(">") Then
		msg.Text = reply
		convert
	End If

End Sub

Sub convert
	Dim aa(), bb() As Byte
	Dim cc As Int
	Dim vin, ss As String
	Dim i,c(), si As Byte
	
	If reply.Length > 16 Then
		
		If res<50 Then
		si=reply.IndexOf("41")	
		aa=bc.HexToBytes(reply.SubString2(si+6,si+8))	'12,14
		bb=bc.HexToBytes(reply.SubString2(si+9,si+11))	'15,17
		a=Bit.And(0xFF,aa(0))		'convert byte to unsigned byte
		b=Bit.And(0xFF,bb(0))
		cn = reply.SubString2(si+3, si+5)	'9,11
	
		Select res
			Case 19
				a = a/200
				b = b*100/128 - 100
				text14.Text = a & " V,  " & b & " %  - " & cn
			Case 16
				a = a*100/255
				text11.Text = a & " %  - " & cn
			Case 15
				a = a-40
				text0f.Text = a & " °C  - " & cn
			Case 14
				a = (a/2)-64
				text0e.Text = a & " °  - " & cn
			Case 13
				text0d.Text = a & " km/h  - " & cn
			Case 12
				cc = (a * 256 + b) / 4
				text0c.Text = cc & " RPM  - " & cn
			Case 11
				text0b.Text = a & " kPa  - " & cn
			Case 7
				a=a*100/128 - 100
				text07.Text = a & " %  - " & cn
			Case 6
				a=a*100/128 - 100 	
				text06.Text = a & " %  - " & cn
			Case 5
				a = a-40
				text05.Text = a & " °C  - " & cn
			Case 4
				a = a*100/255
				text04.Text = a & " %  - " & cn

			End Select
		Else
			si=reply.IndexOf("0:")
			For i=0 To 2
				ss=reply.SubString2(si+12+i*3,si+14+i*3)
				c=bc.HexToBytes(ss)
				vin=vin & BytesToString(c,0,c.Length,"ISO-8859-1")
			Next
			si=reply.IndexOf("1:")
			For i=0 To 6
				ss=reply.SubString2(si+3+i*3,si+5+i*3)
				c=bc.HexToBytes(ss)
				vin=vin & BytesToString(c,0,c.Length,"ISO-8859-1")
			Next
			si=reply.IndexOf("2:")
			For i=0 To 6
				ss=reply.SubString2(si+3+i*3,si+5+i*3)
				c=bc.HexToBytes(ss)
				vin=vin & BytesToString(c,0,c.Length,"ISO-8859-1")
			Next
			textVID.Text = vin

		End If	
	End If
	res=0
	reply=""
End Sub

Sub btn_t_Click
	If conn=1 Then
		Dim pid As String = pidNo.text & Chr(13) & Chr(10)
		usbserial.Write(pid.GetBytes("ISO-8859-1"))	'Chr(13) & Chr(10) Windows-1252 ASCII
	End If
End Sub

Sub btn04_Click
	If conn=1 Then
		Dim pid As String = "0104" & Chr(13) & Chr(10)
		usbserial.Write(pid.GetBytes("ISO-8859-1"))	'Chr(13) & Chr(10)
		res=4
	End If
End Sub

Sub btn05_Click
	If conn=1 Then
		Dim pid As String = "0105" & Chr(13) & Chr(10)
		usbserial.Write(pid.GetBytes("ISO-8859-1"))	'Chr(13) & Chr(10)
		res=5
	End If
End Sub

Sub btn06_Click
	If conn=1 Then
		Dim pid As String = "0106" & Chr(13) & Chr(10)
		usbserial.Write(pid.GetBytes("ISO-8859-1"))	'Chr(13) & Chr(10)
		res=6
	End If
End Sub

Sub btn07_Click
	If conn=1 Then
		Dim pid As String = "0107" & Chr(13) & Chr(10)
		usbserial.Write(pid.GetBytes("ISO-8859-1"))	'Chr(13) & Chr(10)
		res=7
	End If
End Sub

Sub btn0b_Click
	If conn=1 Then
		Dim pid As String = "010B" & Chr(13) & Chr(10)
		usbserial.Write(pid.GetBytes("ISO-8859-1"))	'Chr(13) & Chr(10)
		res=11
	End If
End Sub

Sub btn0c_Click
	If conn=1 Then
		Dim pid As String = "010C" & Chr(13) & Chr(10)
		usbserial.Write(pid.GetBytes("ISO-8859-1"))	'Chr(13) & Chr(10)
		res=12
	End If
End Sub

Sub btn0d_Click
	If conn=1 Then
		Dim pid As String = "010D" & Chr(13) & Chr(10)
		usbserial.Write(pid.GetBytes("ISO-8859-1"))	'Chr(13) & Chr(10)
		res=13
	End If
End Sub

Sub btn0e_Click
	If conn=1 Then
		Dim pid As String = "010E" & Chr(13) & Chr(10)
		usbserial.Write(pid.GetBytes("ISO-8859-1"))	'Chr(13) & Chr(10)
		res=14
	End If
End Sub

Sub btn0f_Click
	If conn=1 Then
		Dim pid As String = "010F" & Chr(13) & Chr(10)
		usbserial.Write(pid.GetBytes("ISO-8859-1"))	'Chr(13) & Chr(10)
		res=15
	End If
End Sub

Sub btn11_Click
	If conn=1 Then
		Dim pid As String = "0111" & Chr(13) & Chr(10)
		usbserial.Write(pid.GetBytes("ISO-8859-1"))	'Chr(13) & Chr(10)
		res=16
	End If
End Sub

Sub btn14_Click
	If conn=1 Then
		Dim pid As String = "0114" & Chr(13) & Chr(10)
		usbserial.Write(pid.GetBytes("ISO-8859-1"))	'Chr(13) & Chr(10)
		res=19
	End If
End Sub

Sub btnDTC_Click
	If conn=1 Then
		Dim pid As String = "0301" & Chr(13) & Chr(10)
		usbserial.Write(pid.GetBytes("ISO-8859-1"))	'Chr(13) & Chr(10) Windows-1252 ASCII
	End If
End Sub

Sub btnVID_Click
	If conn=1 Then
		Dim pid As String = "0902" & Chr(13) & Chr(10)
		usbserial.Write(pid.GetBytes("ISO-8859-1"))	'Chr(13) & Chr(10)
		res=50
	End If
End Sub

Sub Activity_Resume

End Sub

Sub Activity_Pause (UserClosed As Boolean)

End Sub

